package com.xingguo.springSecurity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.web.FilterInvocation;
import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;
import org.springframework.security.web.util.AntUrlPathMatcher;
import org.springframework.security.web.util.RegexUrlPathMatcher;
import org.springframework.security.web.util.UrlMatcher;

import com.xingguo.service.sys.AppResourceService;

/**
 * 资源拦截器
 * 编写自己的FilterInvocationSecurityMetadataSource实现类，对资源进行认证 
 * @author youyp
 */
public class SecureResourceFilterInvocationDefinitionSource implements FilterInvocationSecurityMetadataSource, InitializingBean {
    
	private static final Logger log=Logger.getLogger(SecureResourceFilterInvocationDefinitionSource.class);
	
    private UrlMatcher urlMatcher;
    /**
     * Spring security元数据存储变量，存储资源与访问资源所需的权限，以有序链表式哈希表存储形式存储，单例模式下该变量会作为系统级变量存储
     */
    private Map<String, Collection<ConfigAttribute>> metaDataReource=new LinkedHashMap<String, Collection<ConfigAttribute>>();
    
    private boolean useAntPath = true;    
    private boolean lowercaseComparisons = true;
    @Autowired
	private AppResourceService appResourceService;
    
    public SecureResourceFilterInvocationDefinitionSource() {
    	
	}
    /**
     * 从数据库初始化安全元数据:定义为public 为动态重载安全元数据做接口
     */
    public void initMetaData(){
    	metaDataReource=appResourceService.loadUrlAuthorities();
    	log.info("加载Spring security安全元数据成功！");
    }

	public void setUseAntPath(boolean useAntPath) {
        this.useAntPath = useAntPath;
    }

    public void setLowercaseComparisons(boolean lowercaseComparisons) {
        this.lowercaseComparisons = lowercaseComparisons;
    }

    public void afterPropertiesSet() throws Exception {
    	
        this.urlMatcher = new RegexUrlPathMatcher();        
        if (useAntPath) {
            this.urlMatcher = new AntUrlPathMatcher();
        }
        
        if ("true".equals(lowercaseComparisons)) {
            if (!this.useAntPath) {
                ((RegexUrlPathMatcher) this.urlMatcher).setRequiresLowerCaseUrl(true);
            }
        } else if ("false".equals(lowercaseComparisons)) {
            if (this.useAntPath) {
                ((AntUrlPathMatcher) this.urlMatcher).setRequiresLowerCaseUrl(false);
            }
        }
    }
    
    @Override
	public boolean supports(Class<?> clazz) {
        return true;
    }

	@Override
	public Collection<ConfigAttribute> getAllConfigAttributes() {
		log.info("invoke ----------------------------------------------- getAllConfigAttributes");
		initMetaData();
		return null;
	}
	/**
	 * 收集访问url所需要的权限code，由于访问决策器是一个通过就全部通过，所以目标用户只需要拥有该权限code集合中的一个就可以访问
	 */
	@Override
	public Collection<ConfigAttribute> getAttributes(Object filter)
			throws IllegalArgumentException {
		FilterInvocation filterInvocation = (FilterInvocation) filter;
        String requestURI = filterInvocation.getRequestUrl();
        int index=requestURI.indexOf("?");
        if(index!=-1){
        	requestURI=requestURI.substring(0, index);
        }
        Collection<ConfigAttribute> attributes=null;
        for(Iterator<Entry<String, Collection<ConfigAttribute>>> iter = metaDataReource.entrySet().iterator(); iter.hasNext();) {
            Entry<String, Collection<ConfigAttribute>> entry = iter.next();
            String url = entry.getKey();

            if(urlMatcher.pathMatchesUrl(url, requestURI)) {
            	attributes = entry.getValue();
                break;//取得第一个匹配的权限，也就是访问该资源最高级别的权限
            }
        }
        log.info("根据元数据取得该访问地址所需要的权限为："+attributes);
        return attributes;
	}
	
	/**
	 * @return the metaDataReource
	 */
	public Map<String, Collection<ConfigAttribute>> getMetaDataReource() {
		return metaDataReource;
	}

	/**
	 * @param metaDataReource the metaDataReource to set
	 */
	public void setMetaDataReource(Map<String, Collection<ConfigAttribute>> metaDataReource) {
		this.metaDataReource = metaDataReource;
	}
	
}
